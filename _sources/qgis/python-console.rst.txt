..
    This file is part of "Notas de Aula do Curso Introdução à Programação com Dados Geoespaciais".
    Copyright 2020-2021, Gilberto Queiroz and Thales Körting.


.. _sec_qgis_python_console:

Console Python no QGIS
======================


Vamos criar um novo projeto no QGIS chamado ``CAP-419``. Em seguida, baixe o arquivo :download:`uf_2018.zip <https://1drv.ms/u/s!AtoTP-MfEUEDgq58cYmvg1H3okPCwQ?e=4Sixlg>`, que contém dados sobre as Unidades da Federação do Brasil. Esses dados são relativos ao ano de 2018, encontram-se no formato `ESRI Shapefile <https://en.wikipedia.org/wiki/Shapefile>`_. São 27 feições representadas por geometrias do tipo `MultiPolygon`, na escala :math:`1:250.000`, projeção geográfica `LAT/LONG` e sistema geodésico de referência `SIRGAS 2000`. Inclua este arquivo como uma nova camada no seu projeto QGIS (:numref:`Figura %s <fig:qgis:python-console:camada-uf-2018>`).


.. figure:: ../img/qgis/camada-uf-2018.png
    :alt: Criando um projeto no QGIS chamado CAP-419 e carregando uma camada com as Unidades Federativas do Brasil
    :width: 100%
    :figclass: align-center
    :name: fig:qgis:python-console:camada-uf-2018

    Criando um projeto no QGIS chamado ``CAP-419`` e carregando uma camada com as Unidades Federativas do Brasil.


.. note::

    Quem optou pela instalação dos sistemas através de contêiners Docker, coloque os arquivos do conjunto ESRI Shapefile na pasta ``/home/<seu-usuário>/CAP-419/QGIS-Data``, para que o QGIS possa acessar esses dados mesmo sendo executado de dentro do contêiner.


.. note::

    Maiores informações sobre os arquivos desta seção podem ser encontrados no site de `Geociências <https://www.ibge.gov.br/geociencias/downloads-geociencias.html>`_ do IBGE (Acesso: 04 de Janeiro de 2020).


Para ter acesso ao console do Python de dentro do QGIS, vá ao menu ``Plugins | Python Console``. Um componente como o mostrado na :numref:`Figura %s <fig:qgis:python-console:python-console>` será apresentado. Nesse componente, além de entrar com comandos válidos da linguagem Python, você poderá utilizar diversas funcionalidades da API de programação do QGIS.


.. figure:: ../img/qgis/python-console.png
    :alt: Console do Python dentro da interface gráfica do QGIS
    :width: 100%
    :figclass: align-center
    :name: fig:qgis:python-console:python-console

    Console do Python dentro da interface gráfica do QGIS.


Descobrindo a Camada de Informação Ativa
----------------------------------------


O console Python do QGIS já vem pré-configurado com a carga de algumas bibliotecas do próprio QGIS bem como a definição de alguns identificadores associados a classes e objetos importantes da sua API Python. O identificador ``iface``, por exemplo, que é uma instância da classe `QgisInterface <https://qgis.org/pyqgis/3.16/gui/QgisInterface.html>`_, permite acessar a área de mapas (``map canvas``), os menus, as barras de ferramentas (*toolbars*), além de outras partes da aplicação QGIS.


Vamos começar a programar nesse console utilizando alguns comandos básicos que darão propriedades da camada de informação ativa no seu projeto do QGIS. Para isso, garanta que você tenha um projeto ativo contendo a camada mostrada na :numref:`Figura %s <fig:qgis:python-console:camada-uf-2018>`. Lembre-se de deixar a camada vetorial denominada ``Unidades Federativas - 2018`` ativada por enquanto.


Para obter uma referência à camada de informação ativa, podemos utilizar o método ``activeLayer`` do objeto ``iface``::

    >>> layer = iface.activeLayer()


Entre com o comando acima no console Python do QGIS como indicado na :numref:`Figura %s <fig:qgis:python-console:python-console-layer-info-01>`.


.. figure:: ../img/qgis/python-console-layer-info-01.png
    :alt: Entrando com um comando no console Python do QGIS
    :width: 100%
    :figclass: align-center
    :name: fig:qgis:python-console:python-console-layer-info-01

    Entrando com um comando no console Python do QGIS.


O identificador ``layer`` ficará associado a um objeto representando a camada de informação ativa. Este objeto é definido pela classe `QgsMapLayer <https://qgis.org/pyqgis/3.16/core/QgsMapLayer.html#qgis.core.QgsMapLayer>`_, que por sua vez possui inúmeros métodos e propriedades. Para recuperar o nome da camada como exibida na interface gráfica do QGIS, por exemplo, utilize o método ``name``, como mostrado abaixo (:numref:`Figura %s <fig:qgis:python-console:python-console-layer-info-02>`)::

    >>> layer.name()


.. figure:: ../img/qgis/python-console-layer-info-02.png
    :alt: Recuperando o nome de uma camada de informação
    :width: 100%
    :figclass: align-center
    :name: fig:qgis:python-console:python-console-layer-info-02

    Recuperando o nome de uma camada de informação.


O comando produzirá uma saída com o seguinte texto (:numref:`Figura %s <fig:qgis:python-console:python-console-layer-info-03>`)::

    Unidades Federativas - 2018


.. figure:: ../img/qgis/python-console-layer-info-03.png
    :alt: Nome da camada de informação ativa
    :width: 100%
    :figclass: align-center
    :name: fig:qgis:python-console:python-console-layer-info-03

    Nome da camada de informação ativa.


O método ``id`` permite obter o identificador único dessa camada::

    >>> layer.id()


Saída::

    uf_2018_ca5d5b6f_9ae5_4669_9519_627956f541ee


O método ``type`` retorna o **tipo de camada de informação**: **vetorial** ou **matricial**. No caso da camada representada pelo identificador ``layer``, trata-se de uma camada vetorial, como pode ser verificado pelo comando abaixo::

    >>> layer.type()
    <QgsMapLayerType.VectorLayer: 0>


.. note::

    O QGIS define duas constantes que podem se usadas para comparar o valor de retorno do método ``type``:: ``QgsMapLayer.VectorLayer`` e ``QgsMapLayer.RasterLayer``.


Em uma camada vetorial, é possível descobrir o número de feições contidas nela através do método ``featureCount``::

    >>> layer.featureCount()
    27


.. note::

    Camadas vetoriais são representadas por objetos da classe `QgsVectorLayer <https://qgis.org/pyqgis/3.16/core/QgsVectorLayer.html>`_, que é uma especialização da classe `QgsMapLayer <https://qgis.org/pyqgis/3.16/core/QgsMapLayer.html#qgis.core.QgsMapLayer>`_ discutida anteriormente.


Extensão de uma Camada
----------------------


Para obter a extensão dos objetos de uma camada, podemos utilizar o método ``extent``::

    >>> extensao = layer.extent()


.. code-block:: python

    >>> extensao.toString()
    '-73.9904499689999398,-33.7511779939999315 : -28.8476399139999558,5.2718410770000332'


Sistema de Referência de Coordenadas
------------------------------------


As informações sobre o sistema de coordenadas espacial podem ser obtidas através do método ``crs``, que retorna um objeto da classe `QgsCoordinateReferenceSystem <https://qgis.org/pyqgis/3.16/core/QgsCoordinateReferenceSystem.html>`_::

    >>> layer_crs = layer.crs()


.. code-block:: python

    >>> layer_crs.toWkt()
    'GEOGCS["SIRGAS 2000",\
             DATUM["Sistema_de_Referencia_Geocentrico_para_las_AmericaS_2000",\
                 SPHEROID["GRS 1980",6378137,298.257222101],\
                 TOWGS84[0,0,0,0,0,0,0]], \
             PRIMEM["Greenwich",0],\
             UNIT["degree",0.0174532925199433,\
                  AUTHORITY["EPSG","9122"]],\
             AUTHORITY["EPSG","4674"]]'


Unidade do Mapa
---------------


O método ``mapUnits`` de um objeto da classe `QgsCoordinateReferenceSystem <https://qgis.org/pyqgis/3.16/core/QgsCoordinateReferenceSystem.html>`_ retorna a unidade associada à projeção do sistema de coordenadas espacial::

    >>> layer_crs.mapUnits()
    6


.. note::

    Veja a documentação da classe `QgsUnitTypes.DistanceUnit <https://qgis.org/pyqgis/3.16/core/QgsUnitTypes.html#qgis.core.QgsUnitTypes.DistanceUnit>`_ para informações sobre o signifiado do valor ``6`` como unidade.


.. tip::

    As seguintes constante são válidas:
    - ``QgsUnitTypes.DistanceCentimeters``(7)
    - ``QgsUnitTypes.DistanceDegrees`` (6)
    - ``QgsUnitTypes.DistanceFeet`` (2)
    - ``QgsUnitTypes.DistanceKilometers`` (1)
    - ``QgsUnitTypes.DistanceMeters`` (0)
    - ``QgsUnitTypes.DistanceMiles`` (5)
    - ``QgsUnitTypes.DistanceMillimeters`` (8)
    - ``QgsUnitTypes.DistanceNauticalMiles`` (3)


Acessando as Feições de uma Camada Vetorial
-------------------------------------------


O :numref:`Trecho de Código %s <code:qgis:python-console:feature-it>` mostra como iterarmos nas feições de uma camada vetorial, além de obter as propriedades alfanuméricas e geométricas dessas feições.


.. code-block:: python
    :linenos:
    :name: code:qgis:python-console:feature-it
    :caption: Iterando pelas feições da camada ativa.

    >>> for feature in layer.getFeatures():
    ...     print(f'id: {feature.id()}, '
    ...           f'atributos: {feature.attributes()}, '
    ...           f'geometria: {feature.geometry().centroid().asWkt(5)}')
    ...
    id: 0, atributos: [1, 'SERGIPE', 'SE', '28', 'NORDESTE', 'NE'], geometria: Point (-37.44375 -10.58461)
    id: 1, atributos: [2, 'MARANHÃO', 'MA', '21', 'NORDESTE', 'NE'], geometria: Point (-45.28789 -5.07231)
    id: 2, atributos: [3, 'ESPÍRITO SANTO', 'ES', '32', 'SUDESTE', 'SE'], geometria: Point (-40.66851 -19.57518)
    ...
    id: 25, atributos: [26, 'PARÁ', 'PA', '15', 'NORTE', 'N'], geometria: Point (-53.07206 -3.98069)
    id: 26, atributos: [27, 'TOCANTINS', 'TO', '17', 'NORTE', 'N'], geometria: Point (-48.32923 -10.15031)


O método ``getFeatures`` retorna um iterador para as feições contidas na camada de informação vetorial. As feições, representadas por objetos da classe `QgsFeature <https://qgis.org/pyqgis/3.16/core/QgsFeature.html>`_, possuem um identificador, acessível através do método ``id``, uma lista de propriedades ou atributos acessível atráves do método ``attributes``, e uma geometria associada, que pode ser recuperada através do método ``geometry``.


Como as geometrias da camada ``Unidades Federativas - 2018`` correspondem a polígonos ou coleções de polígonos, utilizamos a operação ``centroid`` para computar o centróide dessas geometrias e, em seguida, transformar esses centróides numa representação textual através da operação ``asWkt`` (*Well-Known Text*).


Informações sobre Classes e Operações no Console Python do QGIS
---------------------------------------------------------------


De dentro do console Python do QGIS podemos verificar a documentação sobre classes, objetos, operações e valores literais, usando a função ``help`` do Python. Por exemplo, se quisermos saber maiores informações sobre o objeto ``iface``, podemos utilizar o seguinte comando::

    >>> help(iface)
    Help on QgisInterface in module qgis._gui object:

    class QgisInterface(PyQt5.QtCore.QObject)
     |  QgisInterface()
     |  Constructor
     |
     |  QgisInterface
     |  Abstract base class defining interfaces exposed by QgisApp and
     |  made available to plugins.
     ...


Para saber sobre um método específico, com o método ``activeLayer``, podemos fazer::

    >>> help(iface.activeLayer)
    Help on built-in function activeLayer:

    activeLayer(...) method of qgis._gui.QgisInterface instance
        activeLayer(self) -> QgsMapLayer
        Returns a pointer to the active layer (layer selected in the legend)


Para saber os nomes de métodos de uma classe, utilize o comando ``dir``, como mostrado abaixo::

    >>> dir(iface)
    ['__class__', ..., 'addRasterLayer', ..., 'addVectorLayer', ..., 'zoomToPrevious']
