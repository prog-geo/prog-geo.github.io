..
    This file is part of "Notas de Aula do Curso Introdução à Programação com Dados Geoespaciais".
    Copyright 2020-2021, Gilberto Queiroz and Thales Körting.


.. _sec_variados_pacotes_introducao:

Introdução
==========


Considere a seguinte estrutura de diretório e arquivos:


.. code-block:: none

    spectral/
        __init__.py
        evi.py
        ndvi.py


O diretório chamado ``spectral`` define o nome do pacote. O arquivo denominado ``__init__.py`` é necessário para que o Python trate esse diretório, contendo os arquivos ``evi.py`` e ``ndvi.py``, como um pacote. Os arquivos ``evi.py`` e ``ndvi.py`` definem módulos desse pacote. Desta maneira, temos a seguinte hierarquia de nomes (ou *namespace*):

.. rst-class:: open

- ``spectral``: pacote.

- ``spectral.evi``: módulo ``evi`` do pacote ``spectral``.

- ``spectral.ndvi``: módulo ``ndvi`` do pacote ``spectral``.


Por hora, considere que o arquivo ``__init__.py`` esteja vazio. O arquivo ``evi.py`` possui o seguinte conteúdo (:numref:`Trecho de Código %s <code:variados:pacotes:introducao:v1:evi>`):


.. literalinclude:: ../../code/variados/pacotes/v1/spectral/evi.py
    :linenos:
    :caption: Arquivo :download:`evi.py <../../code/variados/pacotes/v1/spectral/evi.py>`.
    :name: code:variados:pacotes:introducao:v1:evi


O arquivo ``ndvi.py``, por sua vez, possui o seguinte conteúdo (:numref:`Trecho de Código %s <code:variados:pacotes:introducao:v1:ndvi>`):


.. literalinclude:: ../../code/variados/pacotes/v1/spectral/ndvi.py
    :linenos:
    :caption: Arquivo :download:`ndvi.py <../../code/variados/pacotes/v1/spectral/ndvi.py>`.
    :name: code:variados:pacotes:introducao:v1:ndvi


.. note::

    Neste momento, não estamos preocupados com a robustez dos cálculos e do código.


Crie a estrutura de diretório e arquivos com os conteúdos indicados. Em seguida, abra o terminal do Python no diretório contendo o sub-diretório ``spectral`` e importe o módulo ``evi`` (arquivo ``evi.py``), usando a notação ``pacote.módulo``::

    >>> import spectral.evi


Esse comando irá importar o pacote ``spectral`` para o escopo local::

    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__',
     '__name__', '__package__', '__spec__', 'spectral']


O nome ``spectral`` ficará associado a um módulo::

    >>> type(spectral)
    <class 'module'>


Que por sua vez, possui a seguinte tabela de símbolos::

    >>> dir(spectral)
    ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__',
     '__name__', '__package__', '__path__', '__spec__', 'evi']


Veja que apenas o módulo ``evi`` foi registrado no módulo ``spectral`` e, portanto, encontra-se acessível da seguinte forma::

    >>> type(spectral.evi)
    <class 'module'>


Os nomes definidos pelo módulo ``evi`` são::

    >>> dir(spectral.evi)
    ['C1', 'C2', 'EVI', 'G', 'L', '__builtins__',
     '__cached__', '__doc__', '__file__', '__loader__',
     '__name__', '__package__', '__spec__']


O atributo ``__package__`` do módulo ``spectral.evi`` fornece o nome do pacote ao qual o módulo pertence::

    >>> spectral.evi.__package__
    'spectral'


Essa forma de importação permitirá acessar os objetos definidos no módulo ``evi`` através do espaço de nomes (*namespace*) ``spectral.evi``::

    >>> spectral.evi.L
    1


.. code-block:: python

    >>> spectral.evi.G
    2.5


Também podemos importar um submódulo da seguinte forma::

    >>> from spectral import evi


Veja que agora, o nome ``evi`` foi incluído no escopo local::

    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__',
     '__name__', '__package__', '__spec__', 'evi', 'spectral']


.. code-block:: python

    >>> dir(evi)
    ['C1', 'C2', 'EVI', 'G', 'L', '__builtins__', '__cached__', '__doc__',
     '__file__', '__loader__', '__name__', '__package__', '__spec__']


.. code-block:: python

    >>> type(evi)
    <class 'module'>


Repare que agora, não precisamos utilizar o nome do pacote ``spectral`` como parte do módulo ``evi`` para acessar os nomes definidos no módulo (``evi``).


.. note::

    Apesar de termos utilizado dois comandos de importação relativos ao mesmo módulo, podemos verificar que o Python realizou o processo de carga desse módulo uma única vez, de maneira que os nomes ``evi`` e ``spectral.evi`` referenciam o mesmo objeto (do tipo módulo)::

        >>> evi is spectral.evi
        True


Outra opção consiste em importar nomes específicos dos módulos::

    >>> from spectral.evi import EVI


.. code-block:: python

    >>> type(EVI)
    <class 'function'>


.. code-block:: python

    >>> EVI(nir=0.8, red=0.6, blue=0.6)
    0.5555555555555561


No trecho de código acima, podemos usar o nome ``EVI`` diretamente para referenciar a função com o mesmo nome, definida no módulo ``evi`` (arquivo ``evi.py``) do pacote ``spectral``::

    >>> EVI.__module__
    'spectral.evi'


O arquivo ``__init__.py``
-------------------------


.. note::

    Se você executou o código da seção anterior, feche o interpretador Python e abra-o novamente para limpar todas as definições carregadas.


O que acontece quando você executa o código abaixo?


.. code-block:: python

    >>> from spectral import *


Por padrão, o Python não irá importar os nomes de todos os submódulos do pacote::

    >>> dir()
    ['__annotations__', '__builtins__', '__doc__',
     '__loader__', '__name__', '__package__', '__spec__']


O desenvolvedor de um pacote pode utilizar uma **lista** especial, denominada ``__all__``, no arquivo ``__init__.py`` para exportar os nomes de variáveis, funções, classes, ou módulos que deseja exportar automaticamente quando este tipo de construção é empregada. Por exemplo, considere o seguinte conteúdo para o arquivo ``__init__.py``:


.. code-block:: python
    :linenos:
    :caption: Arquivo ``__init__.py``.
    :name: code:variados:pacotes:init:1

    __all__ = [ 'evi' ]


Agora, abra novamente o terminal do Python e veja o resultado do código abaixo::

    >>> from spectral import *


.. code-block:: python

    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__',
     '__name__', '__package__', '__spec__', 'evi']


Como o nome do módulo ``evi`` foi incluído na lista ``__all__``, no arquivo ``__init__.py``, podemos referenciar símbolos definidos nesse módulo da seguinte forma::

    >>> evi.G
    2.5


O módulo ``evi`` do pacote foi automaticamente importado com a construção ``from spectral import *``.


Altere o código do arquivo ``__init__.py`` para:


.. code-block:: python
    :linenos:
    :caption: Arquivo ``__init__.py``.
    :name: code:variados:pacotes:init:2

    from .evi import G


Veja o que acontece agora com a construção ``from spectral import *``::

    >>> from spectral import *


.. code-block:: python

    >>> dir()
    ['G', '__annotations__', '__builtins__', '__doc__',
     '__loader__', '__name__', '__package__', '__spec__', 'evi']


Veja que a variável ``G`` do módulo ``evi`` foi incluída na tabela de símbolos local do interpretador Python, bem como o módulo ``evi``. Como omitimos a lista ``__all__``, além de executar o conteúdo do arquivo ``__init__.py``, os nomes e módulos importados nele, são exportados automaticamente pelo Python.


Mais uma vez veja o que acontece quando definimos o arquivo ``__init__.py`` com o seguinte conteúdo:


.. code-block:: python
    :linenos:
    :caption: Arquivo ``__init__.py``.
    :name: code:variados:pacotes:init:3

    from .evi import G

    print(f'O valor de G = {G}')

    __all__ = [ 'ndvi' ]


Executando o código::

    >>> from spectral import *
    O valor de G = 2.5

    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__',
     '__name__', '__package__', '__spec__', 'ndvi']


Veja que agora o código em ``__init__.py`` foi executado mas os nomes não foram automaticamente exportados. Apenas o módulo ``ndvi`` indicado na lista ``__all__`` foi exportado.


.. warning::

    Vale ressaltar que todo pacote é um módulo, mas nem todo módulo é um pacote. Os módulos que são pacotes possuem um atributo chamado ``__path__``::

        >>> import spectral
        O valor de G = 2.5


    .. code-block:: python

        >>> dir(spectral)
        ['G', '__all__', '__builtins__', '__cached__',
         '__doc__', '__file__', '__loader__', '__name__',
          '__package__', '__path__', '__spec__', 'evi']

    .. code-block:: python

        >>> spectral.__path__
        ['/home/gribeiro/Temp/spectral']


    .. code-block:: python

        >>> dir(spectral.evi)
        ['C1', 'C2', 'EVI', 'G', 'L', '__builtins__',
         '__cached__', '__doc__', '__file__', '__loader__',
          '__name__', '__package__', '__spec__']


    Repare que o módulo ``spectral.evi`` não possui o atributo ``__path__``, enquanto o módulo ``spectral``, possui.


Tipos de Pacotes em Python
--------------------------


Em Python temos dois tipos de pacotes: **pacotes regulares** (`regular packages <https://docs.python.org/3/glossary.html#term-regular-package>`_) ou **pacotes de espaço de nomes** (`namespace packages <https://docs.python.org/3/glossary.html#term-namespace-package>`_). Os **pacotes regulares** contém arquivos ``__init__.py`` em seus sub-diretórios. O exemplo fornecido nesta seção trabalha com este tipo de pacote.


Os **pacotes de espaço de nomes** formam o mecanismo da linguagem Python que possibilita dividir um único pacote em vários diretórios do disco. Veja que isso é diferente de ter uma estrutura recursiva de inclusão de sub-módulos e sub-pacotes. Para mais informações sobre os pacotes de espaço de nomes, consulte :cite:`pep:420`.


.. note::

    Para mais informações sobre pacotes em Python, consulte :cite:`psf:reference:2021:h` e :cite:`psf:tut:2021:e`.


Considerações Finais
--------------------


Ajuste o conteúdo do arquivo ``__init__.py`` conforme indicado no :numref:`Trecho de Código %s <code:variados:pacotes:introducao:v1:init>`.


.. literalinclude:: ../../code/variados/pacotes/v1/spectral/__init__.py
    :linenos:
    :caption: Arquivo :download:`__init__.py <../../code/variados/pacotes/v1/spectral/__init__.py>`.
    :name: code:variados:pacotes:introducao:v1:init
