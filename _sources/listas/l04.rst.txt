..
    This file is part of "Notas de Aula do Curso Introdução à Programação com Dados Geoespaciais".
    Copyright 2020-2021, Gilberto Queiroz and Thales Körting.


.. _sec_listas_l04:

Lista de Exercícios 04
======================


**Atenção:**

.. rst-class:: open

- Os exercícios práticos devem ser desenvolvidos em Python. Escreva a documentação que achar pertinente dentro do próprio código fonte, que deverá utilizar a codificação de caracteres ``UTF-8``.

- A solução de cada exercício deverá ser entregue em um único arquivo de código fonte na linguagem Python. Use arquivos com a extensão ``.py`` com a seguinte nomenclatura:

    | exercicio-**numero**.py.
    |
    | Exemplo: ``exercicio-01.py``.
    |
    | Não use acentos ou caracteres especiais nos nomes dos arquivos.

- Você deverá entregar a lista através de um *pull-request* a ser realizado no repositório associado ao seu usuário na organização `prog-geo <https://github.com/prog-geo>`_. Esse *pull-request* deverá conter uma pasta com nome **Lista-04** contendo todos os arquivos da entrega.

- **Prazo para entrega:** 17/04/2022 - 18:00


.. warning::

    Arquivos e pasta entregues fora do padrão de nomenclatura não serão considerados para correção.


-----


**Exercício 01.** Faça um programa para computar e apresentar a sequência de cada uma das seguintes séries numéricas, depois de ler um número inteiro :math:`n \geq 0`:

* `Lucas <https://en.wikipedia.org/wiki/Lucas_number}>`_: ``2, 1, 3, 4, 7, 11, 18, 29, 47, ...``.

    .. math::
        :label: l04:eq:lucas

        L(n) =
        \begin{cases}
            2 & \quad \text{se } n = 0\\
            1 & \quad \text{se } n = 1\\
            L(n-1) + L(n-2) & \quad \text{se } n > 1
        \end{cases}

* `Pell <https://en.wikipedia.org/wiki/Pell_number>`_: ``0, 1, 2, 5, 12, 29, 70, 169, 408, ...``.

    .. math::
        :label: l04:eq:pell

        P(n) =
        \begin{cases}
		    0 & \quad \text{se } n = 0\\
		    1 & \quad \text{se } n = 1\\
		    2P(n-1) + P(n-2) & \quad \text{se } n > 1
		\end{cases}

* `Triangular <https://en.wikipedia.org/wiki/Triangular_number>`_: ``0, 1, 3, 6, 10, 15, 21, 28, 36, ...``.

    .. math::
        :label: l04:eq:triangular

        T(n) = \frac{n(n + 1)}{2}

* `Square <https://en.wikipedia.org/wiki/Square_number>`_: ``0, 1, 4, 9, 16, 25, 36, 49, 64, ...``.

    .. math::
        :label: l04:eq:square

        S(n) = n^2

* `Pentagonal <https://en.wikipedia.org/wiki/Pentagonal_number>`_: ``0, 1, 5, 12, 22, 35, 51, 70, 92, ...``.

    .. math::
        :label: l04:eq:pentagonal

        P(n) = \frac{3n^2-n}{2}


**Exercício 02.** Escrever um programa em Python que simule uma calculadora com as funções básicas (:math:`+`, :math:`−`, :math:`\div`, :math:`\times`). O programa deve pedir ao usuário para entrar com os operandos (números reais) e o tipo de operação, e a seguir escrever o resultado. Assim como uma calculadora, que ao final de uma operação pode ser utilizada novamente, você deve simular este comportamento perguntando ao usuário se ele quer realizar uma nova operação.