..
    This file is part of SER-347 Documentation.
    Copyright 2020, Gilberto Queiroz and Thales Körting.


Solução - Lista de Exercícios 03
--------------------------------


**Exercício 01**. Faça um programa para computar cada uma das seguintes séries numéricas, depois de ler um número inteiro ``n ≥ 0``:

    * Lucas
    * Pell
    * Triangular
    * Square
    * Pentagonal


.. code-block:: python
    :linenos:
    :caption: computar_series.py

    # aqui definimos o 'n' final com a variável q
    # a variável 'n' nos códigos abaixo representa o valor
    # atual da série durante as repetições
    q = int(input('Digite a quantidade de termos: '))

    if q >= 0:

      # série Lucas
      print('Lucas')
      # dá para definir termos iniciais antes da repetição
      n_menos_2 = 2
      print(n_menos_2)
      if q >= 1:
        n_menos_1 = 1
        print(n_menos_1)
        n = 2
        # começamos a repetição do termo dependente
        while n <= q:
          lucas = n_menos_1 + n_menos_2
          print(lucas)
          n = n + 1
          n_menos_2 = n_menos_1
          n_menos_1 = lucas

      # série Pell
      print('Pell')
      # dá para definir termos iniciais antes da repetição
      n_menos_2 = 0
      print(n_menos_2)
      if q >= 1:
        n_menos_1 = 1
        print(n_menos_1)
        n = 2
        # começamos a repetição do termo dependente
        while n <= q:
          pell = 2 * n_menos_1 + n_menos_2
          print(pell)
          n = n + 1
          n_menos_2 = n_menos_1
          n_menos_1 = pell

      # série Triangular
      print('Triangular')
      n = 0
      while n <= q:
        print( int(n * (n + 1) / 2) )
        n = n + 1

      # série Square
      print('Square')
      n = 0
      while n <= q:
        print(n * n)
        n = n + 1

      # série Pentagonal
      print('Pentagonal')
      n = 0
      while n <= q:
        print( int((3 * n * n - n) / 2) )
        n = n + 1

    else:
      print('Quantidade de termos inválida')


**Exercício 02**. Escrever um programa em ``Python`` que simule uma calculadora com as funções básicas (``+``, ``-``, ``/``, ``*``). O programa deve pedir ao usuário para entrar com os operandos (números reais) e o tipo de operação, e a seguir escrever o resultado. Assim como uma calculadora, que ao final de uma operação pode ser utilizada novamente, você deve simular este comportamento perguntando ao usuário se ele quer realizar uma nova operação.


.. code-block:: python
    :linenos:
    :caption: calculadora2.py

    # para entrar no while na primeira execução, vamos criar uma condição verdadeira
    r = 's'
    while r == 's':
      # leitura dos operandos e da operação
      a = float( input('Entre com o operando 1: ') )
      op = input( 'Entre com o tipo de operação (+, -, /, *): ' )
      b = float( input('Entre com o operando 2: ') )

      if op == '+':
        print(a + b)
      elif op == '-':
        print(a - b)
      elif op == '/':
        print(a / b)
      elif op == '*':
        print(a * b)
      else:
        print('Operação inválida')

      # aqui, qualquer resposta diferente de 's' vai sair do programa
      r = input('Deseja realizar uma nova operação [s/n]? ')
