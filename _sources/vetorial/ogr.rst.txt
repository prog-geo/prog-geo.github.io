..
    This file is part of SER-347 Documentation.
    Copyright 2020, Gilberto Queiroz and Thales Körting.


Leitura e Escrita de Dados Vetoriais com a biblioteca GDAL/OGR
--------------------------------------------------------------


A parte da biblioteca ``GDAL`` voltada para manipulação de dados vetoriais é conhecida por ``OGR``. A :numref:`Figura %s <vetorial:ogr>` apresenta as principais classes que compõem esta API.


.. figure:: ../img/vetorial/modelo-ogr.png
    :alt: Modelo de Objetos da OGR em Python
    :width: 640
    :figclass: align-center
    :name: vetorial:ogr

    Modelo de Objetos da ``OGR`` em ``Python``.


A classe ``DataSource`` representa uma coleção de camadas de informação ou *layers*. Um objeto ``DataSource`` pode ser usado para acessar um único arquivo, um conjunto de arquivos, um conjunto de tabelas de um banco de dados, ou coleções de feições em um serviço Web do tipo OGC Web Feature Service (WFS).


A classe `Layer` representa uma camada de informação contida em um ``DataSource``. Essa classe contém operações que possibilitam a leitura e escrita de feições (*features*), isto é, um objeto geográfico. Neste documento também usaremos o termo *coleção de feições* ou *feature collection* quando nos referirmos a uma camada de informação.


Todas as feições de uma mesma camada possuem a mesma estrutura, isto é, o mesmo conjunto de atributos. Denominamos esta estrutura da camada de informação de **esquema**. A classe ``FeatureDefn`` é usada para descrever o esquema de uma camada de informação, isto é, ela fornece uma lista com o nome dos atributos e seus respectivos tipos de dados. As feições pertencentes a uma mesma camada de informação irão compartilhar esta estrutura.


A classe ``Feature`` representa os dados de uma feição, que podem ser valores alfanuméricos e geométricos.


Para entender melhor esta estrutura (:numref:`Figura %s <vetorial:ogr>`), vamos considerar o caso de um mapa contendo informações dos municípios brasileiros no formato ``ESRI Shapefile``. Neste caso, os dados estarão organizados em pelo menos três arquivos:

- um com a extensão ``.dbf``, contendo os atributos alfanuméricos de cada feição;

- um segundo, com a extensão ``.shp``, contendo os polígonos representando as fronteiras dos municípios;

- e, um terceiro, com a extensão ``.shx``, cotendo os índices posicionais para rápido acesso às geometrias.


Suponha que os arquivos possuam o nome base ``municipios_brasileiros``. Um objeto do tipo ``DataSource`` (fonte de dados) irá representar esse conjunto de arquivos. A partir dele, teremos acesso ao conjunto de feições (municípios) através de um objeto do tipo ``Layer`` (camada de informação). Esse objeto por sua vez irá possibilitar acessar os dados de cada município, através de objetos do tipo ``Feature`` (feição geográfica). A partir de um objeto do tipo ``Feature`` podemos obter tanto os atributos alfanuméricos, como o código do município, nome do município, e população total, e a geometria usada para representar seus limites (polígonos).


Ainda completam o diagrama da :numref:`Figura %s <vetorial:ogr>`, a classe ``FieldDefn``, que representa as informações de um dado atributo do esquema da camada de informação; e, a classe ``Geometry``, que representa os tipos geométricos suportados pela ``OGR``, como pontos, linhas e polígonos.


.. note::

    O conjunto de arquivos Shapefile também pode incluir arquivos com extensões como ``.prj``, contendo a descrição do sistema de referência espacial, e, ``.cpg``, contendo a codificação dos caracteres dos dados contidos no arquivo ``.dbf``. Para maiores detalhes do formato ``Esri Shapefile``, veja a descrição fornecida na `Wikipedia <https://en.wikipedia.org/wiki/Shapefile>`_.


.. warning::

    Essa nota de aula pressupõe que você esteja usando o código dentro do ambiente Jupyter Notebook.


Instalando a biblioteca GDAL/OGR
********************************

Para instalar a ``GDAL/OGR``, ative seu ambiente de trabalho da ``Anaconda`` e instale o pacote através do ``conda``:


.. code-block:: shell

    conda activate geospatial

    conda install gdal=3


.. note::

    No meu ambiente, foi instalada a versão ``3.0.2``.


Carregando a Biblioteca GDAL/OGR
********************************


Uma boa prática ao trabalhar com bibliotecas que não fazem parte da distribuição padrão do ``Python`` consiste na verificação de sua carga logo após as instruções ``import``. O trecho de código abaixo mostra como realizar essa verificação logo no início do seu *script*, para certificar que a biblioteca ``GDAL`` tenha sido devidamente carregada antes de prosseguir com as próximas instruções do programa. Neste *script*, utilizamos um bloco ``try-except`` para verificar se o módulo ``osgeo`` e as APIs ``ogr`` e ``gdal`` foram devidamente carregados (``linhas 3-6``). Na ``linha 9`` utilizamos a função ``VersionInfo`` da API ``GDAL`` para obter uma string com a versão e data de build da ``GDAL``.


.. code-block:: python
    :linenos:

    import sys

    try:
        from osgeo import gdal, ogr
    except:
        sys.exit('ERRO: módulo GDAL/OGR não encontrado!')

    # versão da biblioteca GDAL/OGR
    print(gdal.VersionInfo('VERSION'))


Leitura de Dados
****************

Vamos abrir o shapefile ``deter_201707.shp``:


.. code-block:: python

    shp = ogr.Open('data/deter/deter_201707.shp')


Veja que a operação ``ogr.Open`` cria um objeto chamado ``shp`` da classe ``DataSource``:


.. code-block:: python

    type(shp)


A partir de um objeto do tipo ``DataSource`` podemos recuperar a camada de informação contida nessa fonte atravé do método ``GetLayer``:


.. code-block:: python

    layer = shp.GetLayer('deter_201707')

    type(layer)


De um objeto do tipo ``Layer`` podemos recuperar algumas informações básicas, como mostrado abaixo:


.. code-block:: python

    nome_layer = layer.GetName()
    print(f'Layer: {nome_layer}')

    bbox = layer.GetExtent()
    print(f'\tExtensão.......: {bbox}')

    crs = layer.GetSpatialRef().ExportToWkt()
    print(f'\tSRS............: {crs}')

    tipo_geometrias = layer.GetGeomType()
    print(f'\tTipo Geométrico: {tipo_geometrias}')

    print('\tPolígonos? ', tipo_geometrias == ogr.wkbPolygon)

    num_features = layer.GetFeatureCount()
    print(f'\t#Feições.......: {num_features}')


Podemos também obter o esquema das feições da camada:


.. code-block:: python

    layer_def = layer.GetLayerDefn()

    print("Name       - Type    Width  Precision")

    for i in range(layer_def.GetFieldCount()):

        field_name =  layer_def.GetFieldDefn(i).GetName()
        field_type_code = layer_def.GetFieldDefn(i).GetType()
        field_type = layer_def.GetFieldDefn(i).GetFieldTypeName(field_type_code)
        field_width = layer_def.GetFieldDefn(i).GetWidth()
        field_precision = layer_def.GetFieldDefn(i).GetPrecision()

        print(field_name.ljust(10) + " - " + \
              field_type.ljust(7) + " " + \
              str(field_width).ljust(6) + " " + \
              str(field_precision))


Para acessar os elementos da camada podemos utilizar um laço do tipo ``for`` como o mostrado abaixo:


.. code-block:: python

    for feature in layer:
        view_date = feature.GetField("view_date")

        geom = feature.GetGeometryRef()

        centroide = geom.Centroid()

        print( "view_date: {}, Localização: {}".format(view_date, centroide.ExportToWkt()) )